Resources
- CSS, Javascript, HTML, Images : Static resources
- Dynamic resources (Server side technologies) :
	- They send a dynamic or different html response to the client based on the request
	- That interact with a database and CRUD (Create, Read, update, delete), login
	- Logic that needs to execute at the server side

Server
 - Deployed on the server (web server)
 - Clients can send request to the server for the resources : URL (Address)

Django -> Complete web application (static + dynamic)
Static -> HTML project and deploy on the server

python --version
pip --version
pip install django
python -m django --version

- django-admin startproject firstwebapp
- python manage.py startapp library

URL
home/ -> firstwebapp -> urls.py -> urlpatterns -> there is a match -> call a function which will generate the html to be sent in the response

Format of data exchange
- XML
- JSON

Client would perform actions on ur resource (Book) in a web service model
- Create : URL -> /create-book | Data exchange -> JSON ?? URL ?? | Response code -> ??
- Update : URL -> /update-book
- Delete : URL -> /delete | Response code -> ??
- Query : URL -> /getbooks | | Response code -> ??

Fix the chaos in web service model -> Architectural style -> REST
- Resource name should be plural : books
- Create : URL -> /books | Http Methods -> POST
- Query : URL -> /books | Http Method -> GET
- Update : URL -> /books/<bookId> | Http Method -> PUT
- Delete : URL -> /books/<bookId> | Http Method -> DELETE
- Query for a book : URL -> /books/<bookId> | Http Method -> GET

Response Codes : REST
- Success
	- POST -> 201
	- GET -> 200
	- PUT -> 200
	- DELETE -> 204 or 200
- Errors
	- Client side error : 4xx HTTP
	- Server side error : 5xx HTTP
